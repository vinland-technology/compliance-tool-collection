#!/bin/bash

# FOSS Compliance Utils / compliance-tool
#
# SPDX-FileCopyrightText: 2021 Henrik Sandklef
#
# SPDX-License-Identifier: GPL-3.0-or-later
#



PROG=$(basename "$0")

#
# compliance tools docker image settings
#
DOCKER_IMAGE=sandklef/compliance-tools
DOCKER_TAG=0.5.13
COMPLIANCE_TOOL_VERSION=${DOCKER_TAG}

DOCKER_ARGS=" ${DOCKER_IMAGE}:${DOCKER_TAG}"
MOUNT_DIR=/compliance-tools
MOUNT_TMP_DIR=/tmp/compliance-tools
DOCKER_MOUNT_ARGS="-v $(pwd):${MOUNT_DIR} -v ${MOUNT_TMP_DIR}:${MOUNT_TMP_DIR}"

OS=$(uname)

case "$OS" in 
  *CYGWIN*)
      DOCKER_MOUNT_ARGS="-v $(cygpath -w $(pwd)):${MOUNT_DIR} -v $(cygpath -w ${MOUNT_TMP_DIR}):${MOUNT_TMP_DIR}"
    ;;
esac

DEBUG=false


declare -A PROGRAM_ARGUMENTS
PROGRAM_ARGUMENTS["lookup-license"]=" --tmp-dir /tmp/conpliance-tool "

error()
{
    echo "$*" 1>&2
}

verbose()
{
    if [ "$DEBUG" = "true" ]
    then
        echo "$*" 1>&2
    fi
}

verbosen()
{
    if [ "$DEBUG" = "true" ]
    then
        echo -n "$*" 1>&2
    fi
}

exit_if_error()
{
    if [ $1 -ne 0 ]
    then
        error "ERROR..."
        if [ "$2" != "" ]
        then
            error "$2"
        fi
        exit $1
    fi
}

check_image()
{
    verbosen  "Checking docker image $DOCKER_IMAGE ($DOCKER_TAG): "
    
    PRESENT=$(docker images | grep -e "$DOCKER_IMAGE" | grep "${DOCKER_TAG}" | wc -l)
    if [ $PRESENT -gt 0 ] 
    then
        verbose "OK, present"
    else
        verbose "Fail, missing"
        error "No docker image \"${DOCKER_IMAGE}:${DOCKER_TAG}\""
        exit 1
    fi
}

dload_image()
{
    local image=$1
    local tag=$2
    verbosen  "Downloading docker image $image ($tag): "
    
    docker pull "${image}:${tag}"
    if [ $? -eq 0 ] 
    then
        verbose "OK"
    else
        verbose "Fail, could not pull image"
        error "Could not pull docker image \"${DOCKER_IMAGE}:${DOCKER_TAG}\""
        exit 1
    fi
}

run_docker()
{
    local PROG=$1
    shift 
    local ARGS="$* ${PROGRAM_ARGUMENTS[$PROG]}"

    DOCKER_RUN_OPTS="--rm -i"
    if [ "$PROG" = "bash" ] || [ "$PROG" = "scancode" ]
    then
        DOCKER_RUN_OPTS="$DOCKER_RUN_OPTS -t"
    fi
        
    verbose "docker run ${DOCKER_RUN_OPTS} ${DOCKER_MOUNT_ARGS} ${DOCKER_ARGS} $PROG $ARGS"
    docker run  ${DOCKER_RUN_OPTS} ${DOCKER_MOUNT_ARGS} ${DOCKER_ARGS} $PROG $ARGS
}

docker_versions()
{
    echo -n " * Aboutcode:                 " && run_docker about --version | grep "AboutCode-toolkit version" | cut -d " " -f 3
    echo -n " * Compliance utils:          " && run_docker flict-to-dot --version 
    echo -n " * createnotices.py:          unknown" && echo
#    echo -n " * Deltacode:                 " && run_docker deltacode --version | grep "DeltaCode version" | cut -d " " -f 3
    echo -n " * Flict:                     " && run_docker flict --version 
    echo -n " * License detector:          unknown" && echo 
    echo -n " * Ninka:                     " && run_docker ninka | head -1 | cut -d " " -f 2
#    echo -n " * Ort:                       " && run_docker ort --version | grep version | cut -d "," -f 2 | cut -d " " -f 3 | sed 's,\.,,g'
#    echo -n " * Reuse:                     " && run_docker reuse --version | cut -d " " -f 2
    echo -n " * Scancode:                  " && run_docker scancode --version | grep -v -e SPDX -e Output | cut -d " " -f 3
    echo -n " * Scancode manifestor:       " && run_docker scancode-manifestor --version | cut -d " " -f 3
    echo -n " * Scarfer:                   " && run_docker scarfer --version | awk '{print $2}'
    echo -n " * nfhc:                   " && run_docker nfhc --version | awk '{print $2}'
}

usage()
{
    echo "NAME"
    echo ""
    echo "    ${PROG} - misc license compliance tools in one docker image"
    echo ""
    echo
    echo "SYNOPSIS"
    echo 
    echo "    ${PROG} [OPTION]"
    echo ""
    echo ""
    echo "DESCRIPTION"
    echo ""
    echo "    ${PROG} manages a docker image with useful license compliance tools."
    echo "    Included tools:"
    echo "        flict"
    echo "        license-detectork"
    echo "        ninka"
#    echo "        ort"
    echo "        reuse"
    echo "        scancode"
    echo ""
    echo "    The current directory is mounted under ${MOUNT_DIR}. This is crucial to let the"
    echo "    tools work on your files and directories and output result outside the"
    echo "    docker container. ${MOUNT_DIR} is also set as the docker WORKDIR"
    echo ""
    echo "    When invoked under any of the following names:"
#    echo "        flict, license-detector, ninka, ort"
    echo "        flict, license-detector, ninka"
    echo "        reuse, scancode, scancode-manifestor"
    echo "    the corresponding program (run inside) docker is invoked and the arguments"
    echo "    are passed to the program."
    echo ""
    echo "    To ease up executing the commands you can add the directory where ${PROG} "
    echo "    is loacted to PATH. You can typically do this by adding the following to "
    echo "    your ~/.bashrc (assuming you're using bash):"
    echo "         PATH=$(realpath $(dirname ${BASH_SOURCE[0]})/../wrappers):\$PATH"
    echo ""
    echo "OPTIONS"
    echo ""
    echo "    -h, --help"
    echo "          output this help text"
    echo ""
    echo "    -v, --verbose"
    echo "          enable verbose printout"
    echo ""
    echo "    -s, --setup"
    echo "          start new shell with PATH setup for accessing our tools via"
    echo "          their name directly"
    echo ""
    echo "    -np, --no-parallel"
    echo "          do not use parallel processes when scanning (with Scancode). "
    echo "          By default all processors are used. This option is useful if "
    echo "          you want to keep scancode in the background"
    echo 
    echo "    --version"
    echo "          output version information for this tool"
    echo
    echo "    --versions"
    echo "          output version information for this tool and the"
    echo "          built in programs"
    echo
    echo "    bash"
    echo "          Starts a bash session in docker"
    echo
    echo "    dependencies.sh [ARGS]"
    echo "          recursively find dependencies for an ELF program"
    echo
    echo "    flict [ARGS]"
    echo "          Starts flict with the arguments [ARGS]"
    echo
    echo "    license-detector [ARGS]"
    echo "          Starts license-detector with the arguments [ARGS]"
    echo
    echo "    lookup-license"
    echo "          interactively match a license text to a license"
    echo
    echo "    ninka [ARGS]"
    echo "          Starts ninka with the arguments [ARGS]"
    echo
    echo "    reuse [ARGS]"
    echo "          Starts reuse with the arguments [ARGS]"
    echo
    echo "    scancode [ARGS]"
    echo "          Starts scancode with the arguments [ARGS]"
    echo
    echo "    scancode-wrapper [DIR]"
    echo "          Scan (Scancode) of DIR, storing result in DIR-scan.json"
    echo ""
    echo "    scancode-wrapper --repo [REPO]"
    echo "          Git clone and scan (Scancode) of REPO, storing result in *-scan.json"
    echo
    echo "    repo-license [REPO]"
    echo "          Git clone REPO, scan (Scancode) repo, exract license of REPO"
    echo
    echo "    pull"
    echo "          Pulls the docker image $DOCKER_IMAGE ($DOCKER_TAG)"
    echo "          from docker.io"
    echo
    echo "EXAMPLES"
    echo ""
    echo "    Invoke Scancode to scan directory X (in the current directory)" 
    echo "        ${PROG} scancode -clipe X --json X.json"
    echo "    or like this (assuming you've modified the PATH variable as described above):"
    echo "        scancode -clipe X --json X.json"
    echo ""
    echo "    Invoke scancode-wrapper to scan directory X" 
    echo "        scancode-wrapper X"
    echo "" 
    echo "AUTHOR"
    echo ""
    echo "    Written by Henrik Sandklef"
    echo
    echo "    Please note that this is simply a wrapper around some great programs."
    echo
    echo "COPYRIGHT"
    echo ""
    echo "    Copyright (c) 2021 Henrik Sandklef"
    echo "    License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
    echo "    This  is  free  software: you are free to change and redistribute it.  "
    echo "    There is NO WARRANTY, to the extent permitted by law."
    echo
    echo
    echo "REPORTING BUGS"
    echo ""
    echo "    Create an issue at https://github.com/vinland-technology/compliance-tools-collections"
    echo
    echo "SEEL ALSO"
    echo ""
    echo "    misc tools         - https://github.com/vinland-technology/compliance-utils"
    echo "    compliance-scripts - https://github.com/armijnhemel/compliance-scripts/tree/master/copyright-statements"
    echo "    flict              - https://github.com/vinland-technology/flict"
    echo "    license-detector   - http://github.com/go-enry/go-license-detector"
    echo "    ninka              - http://ninka.turingmachine.org/"
#    echo "    ort              - https://github.com/oss-review-toolkit/ort" 
    echo "    reuse              - https://reuse.software/"
    echo "    scancode           - https://github.com/nexB/scancode-toolkit" 
    echo ""
}

git_dir()
{
    basename $1 | sed 's,\.git,,g'
}

setup_scancode_wrapper()
{
    len=$#
    cnt=1
    EXTRA_ARGS=""
    DIR_TO_SCAN=""
    verbose "parsing $*"
    while [ "$1" != "" ]
    do
        verbose "parsing $cnt: $cnt / $len"
        if [ "$1" = "--version" ] || [ "$1" = "-V" ]
        then
            echo "scancode-wrapper (Compliance tools collection): $COMPLIANCE_TOOL_VERSION"
            exit 0
        elif [ "$1" = "--repo" ]
        then
            GIT_REPO=$2
            shift
            cnt=$(( $cnt + 1 ))
            verbose "clone repo $GIT_REPO"
            git clone --depth=1 $GIT_REPO
            exit_if_error $? "Failed cloning $GIT_REPO"
            
            GIT_DIR=$(git_dir $GIT_REPO)
            verbose "repo dir $GIT_DIR"
            #echo "here I am .... $GIT_DIR"
            DIR_TO_SCAN=${GIT_DIR}
            #echo "here I am .... $DIR_TO_SCAN"
            if [ ! -d $DIR_TO_SCAN ]
            then
                error "Cloned directory not found in the folder we gussed: $DIR_TO_SCAN"
                exit 1
            fi
        elif [ "$1" == "--tgz" ]
        then
            TARGZ=$2
            shift
            cnt=$(( $cnt + 1 ))
             
            curl -LJO ${TARGZ}
            exit_if_error $? "Failed downloading $TARGZ"

            TARGZ_FILE=$(basename ${TARGZ})
            TARGZ_DIR=$(echo ${TARGZ_FILE} | sed 's,\.tar\.gz,,g')

            mkdir ${TARGZ_DIR}            
            exit_if_error $? "Failed creating $TARGZ_DIR"
            
            cd ${TARGZ_DIR}            
            exit_if_error $? "Failed entering $TARGZ_DIR"
            
            tar zxvf ../${TARGZ_FILE}
            exit_if_error $? "Failed unpacking $TARGZ_FILE"

            cd -

            DIR_TO_SCAN=${TARGZ_DIR}
            
        # if last arg (and DIR_TO_SCAN not, typically via git))
        elif [ $cnt -eq $len ] && [ "$DIR_TO_SCAN" == "" ]
        then
            verbose " dir to scan: $1"
            DIR_TO_SCAN="$1"
           
        else
            verbose " other arg: $1"
            EXTRA_ARGS=" $EXTRA_ARGS $1 "
        fi
        shift
        cnt=$(( $cnt + 1 ))
        verbose "<-- parsing $1: $cnt / $len  ($*)"
    done

    if [ -z "$DIR_TO_SCAN" ]
    then
        error "No directory (to scan) supplied"
        exit 1
    fi

    # Remove trailing "/"
    DIR_TO_SCAN=$(echo $DIR_TO_SCAN | sed 's,/$,,g')

    NR_OF_SLASHES=$(echo $DIR_TO_SCAN | grep -c "/")
    #echo "NR_OF_SLASHES: $NR_OF_SLASHES"
    if [ $NR_OF_SLASHES -ne 0 ]
    then
        error "The supplied directory to scan (\"$DIR_TO_SCAN\") contains \"/\" which is not allowed."
        error "Scancode-wrapper can only (for now) scan in the current directory"
        exit 2
    fi

    if [ ! -d $DIR_TO_SCAN ]
    then
        error "The supplied directory to scan (\"$DIR_TO_SCAN\") does not seem to be a directory."
        exit 3
    fi
    
    #DIR_TO_SCAN="$1"
    SC_REPORT=${DIR_TO_SCAN}-scan.json
    export PROG=scancode
    export ARGS=" -clipe --license-text --license-text-diagnostics --classify --license-clarity-score --summary ${PARALLEL_ARGS} ${EXTRA_ARGS} --json-pp ${SC_REPORT} ${DIR_TO_SCAN} "

    verbose "Preparing PROG and ARGS for scancode"
    verbose " * PROG: $PROG"
    verbose " * ARGS: $ARGS"
}

verbose "$PROG"
ARGS=$*
# Measure on host, use in docker (same as host)
PARALLEL_ARGS=" -n $(cat /proc/cpuinfo | grep processor | wc -l) "

verbose "check $PROG"
case $PROG in
    "compliance-tool")
        verbose "check $PROG - compliance-tool found"
        while [ "$1" != "" ]
        do
            verbose "check $PROG - compliance-tool found - parse $1"
            case "$1" in
                "--verbose"|"-d")
                    DEBUG=true
                    ;;
                "--help"|"-h")
                    usage
                    exit 0
                    ;;
                "--setup"|"-s")
                    DEBUG=true verbose "Setting up environment for compliance-tool in a new shell."
                    export PATH=$(realpath $(dirname ${BASH_SOURCE[0]})/../wrappers):$PATH
                    bash
                    exit 0
                    ;;
                "--version"|"-V")
                    echo "Compliance tools collection: $COMPLIANCE_TOOL_VERSION"
                    exit 0
                    ;;
                "--versions")
                    echo "Compliance tools collection: $COMPLIANCE_TOOL_VERSION"
                    check_image
                    docker_versions
                    exit 0
                    ;;
                "--no-parallel"|"-np")
                    PARALLEL_ARGS=" -n 1 "
                    ;;
                "bash"|"shell")
                    PROG=bash
                    ARGS=""
                    ;;
                "pull")
                    docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                    exit 0
                    ;;
                "scancode-wrapper"|"sw")
                    shift
                    setup_scancode_wrapper $*
                    break
                    ;;
                "repo-license"|"rl")
                    shift
                    echo "Scan repository: $*"
                    $0 scancode-wrapper --repo $*
                    GIT_DIR=$(git_dir $1)
                    SCAN_FILE=${GIT_DIR}-scan.json
                    echo "Identify license for : $SCAN_FILE"
                    run_docker scarfer $SCAN_FILE -ls
                    exit 0
                    ;;
                "--")
                    shift
                    PROG=$1
                    shift
                    ARGS="$*"
                    break
                    ;;
                *)
                    PROG=$1
                    shift
                    ARGS="$*"
                    break
            esac
            shift
        done
        ;;
    "scancode-wrapper")
        setup_scancode_wrapper $*
        ;;
    *)
        verbose "Ignoring $PROG since it is the program to start"
        ;;
esac


check_image

run_docker $PROG $ARGS
RET=$?
verbose "Running $PROG $* via docker"
exit $RET
